[gd_scene load_steps=3 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float aspect_ratio;
uniform float zoom:hint_range(0.1, 100.0) = 7.5;
uniform float thickness:hint_range(1., 100.) = 5.; 
uniform vec2 offset = vec2(0.);
uniform float fac = 1.;

vec4 plot(vec2 uv, float y, vec4 color, float t) {
	return smoothstep(t, 0., abs(uv.y + y)) * color;
}

void fragment() {
	vec4 color = vec4(0., 0.,0., 1.);
	vec2 uv = UV;
	
	float t = thickness * 0.001 * zoom;
	
	uv -= 0.5;
	uv.y *= aspect_ratio;
	
	uv *= zoom;
	
	uv += offset;
	
	vec4 green = vec4(0., 1., 0., 1.);
	vec4 yellow = vec4(1., 1., 0., 1.);
	
	float f1 = step(-1, -uv.x);
	float f2 = sin(uv.x);

	color += plot(uv, f1, green, t);
	color += plot(uv, f2, yellow, t);
	
	if(length(color) <= 1.2) {
		color += plot(uv, 0, vec4(.0, .0, 1.0, 1.0), t / 2.);
		color += plot(uv.yx, 0, vec4(1.0, .0, .0, 1.0), t / 2.);
	}
	
	COLOR = color;
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/aspect_ratio = 0.58
shader_param/zoom = 22.428
shader_param/thickness = 5.0
shader_param/offset = Vector2( 0, 0 )
shader_param/fac = 1.0

[node name="TestShaderScene" type="Node2D"]

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}
